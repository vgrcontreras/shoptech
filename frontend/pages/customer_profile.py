# -- qual √© a faixa etaria de clientes que mais compram conosco e sua m√©dia de faturamento?

import streamlit as st
from modules.nav import navbar

st.set_page_config(page_title='Relat√≥rios', page_icon='üîé')

navbar()

import streamlit as st

# T√≠tulo da documenta√ß√£o
st.title('An√°lise de Perfil de Clientes da Shoptech')

# Objetivo da an√°lise
st.subheader('üéØ Objetivo da An√°lise')
st.write("""
O objetivo desta an√°lise √© identificar qual √© o perfil ideal dos clientes da Shoptech. 
Para isso, foram consideradas informa√ß√µes como g√™nero, localidade por estado, idade m√©dia e total de vendas por perfil de cliente.
""")

# Descri√ß√£o da tabela
st.subheader('üóÇÔ∏è Descri√ß√£o da Tabela')
st.write("""
A tabela gerada neste relat√≥rio cont√©m as seguintes colunas:
""")

# Lista com a descri√ß√£o das colunas
st.markdown("""
- **G√™nero**: Indica o g√™nero do perfil de cliente (exemplo: "Feminino", "Masculino", "Outros").
- **Estado (UF)**: Representa o estado de resid√™ncia do perfil de cliente.
- **Total Pedidos**: Exibe o total de vendas realizadas por cada perfil de cliente.
- **Idade M√©dia**: Mostra a idade m√©dia dos clientes dentro de cada perfil.
- **Ticket M√©dio**: Apresenta o valor m√©dio dos pedidos para cada perfil de cliente.
- **Rank Vendas**: Classifica√ß√£o do perfil com base no total de pedidos, onde menor valor indica maior quantidade de pedidos.
- **Rank Ticket M√©dio**: Classifica√ß√£o do perfil em rela√ß√£o ao ticket m√©dio, onde menor valor indica maior ticket m√©dio.
""")

# Metodologia
st.subheader('üõ†Ô∏è Metodologia')
st.write("""
Os dados foram extra√≠dos e processados para identificar padr√µes de compra dos clientes da Shoptech. 
Com base nessas informa√ß√µes, √© poss√≠vel avaliar quais perfis geram mais vendas e possuem maior ticket m√©dio.
""")

# Como interpretar os dados
st.subheader('üìå Como Interpretar os Dados')
st.markdown("""
- Perfis com **menor `Rank Vendas`** representam aqueles que possuem o maior n√∫mero de pedidos.
- Perfis com **menor `Rank Ticket M√©dio`** representam aqueles que possuem o maior ticket m√©dio por compra.
- O cruzamento entre os rankings permite identificar os clientes mais valiosos para a Shoptech.
""")

# Mensagem final
st.success(
    'üîç Utilize estas informa√ß√µes para analisar e tomar decis√µes estrat√©gicas com base no perfil dos clientes da Shoptech.'
)

conn = st.connection('postgresql', type='sql')

df = conn.query(
    'SELECT * FROM marts.customer_profile;',
    show_spinner='Carregando dados...',
    ttl=0,
)

st.subheader('Relat√≥rio')

s = df.style.format({
    'total_orders': lambda x: '{:.0f}'.format(x),
    'avg_age': lambda x: '{:.0f}'.format(x),
    'avg_order_value': lambda x: 'R${:.2f}'.format(x),
    'rank_total_orders': lambda x: '{:.0f}'.format(x),
    'rank_avg_order_value': lambda x: '{:.0f}'.format(x),
})


st.dataframe(
    s,
    column_config={
        'gender': 'G√™nero',
        'state': 'Estado (UF)',
        'total_orders': 'Pedidos',
        'avg_age': 'Idade M√©dia',
        'avg_order_value': 'Ticket M√©dio',
        'rank_total_orders': 'Rank Vendas',
        'rank_avg_order_value': 'Rank Ticket M√©dio',
    },
)

sql_query = """
with

total_orders_per_customer as (

select
	t2.gender
	,t2.state
	,count(t2.customer_id) as total_orders
	,round(cast(avg(date_part('year', age(t2.date_of_birth))) as numeric), 0) as avg_age
	,round(avg(t1.order_value::numeric), 2) as avg_order_value
from
	staging.stg_shoptech__orders t1
inner join
	staging.stg_shoptech__customers t2
	on t1.customer_id = t2.customer_id
group by t2.gender,t2.state
order by total_orders desc

)

select 
	*
	,rank() over (order by total_orders desc) as rank_total_orders
	,rank() over (order by avg_order_value) as rank_avg_order_value
from 
	total_orders_per_customer
order by total_orders desc
"""

# Exibir c√≥digo SQL no Streamlit
st.subheader('C√≥digo SQL')
st.text('O c√≥digo abaixo foi utilizado para gerar a tabela de an√°lise:')
st.code(sql_query, language='sql')

# Explica√ß√£o da consulta SQL
st.subheader('Explica√ß√£o da Consulta SQL')
st.text(
    'O c√≥digo SQL abaixo foi utilizado para criar a tabela de an√°lise de perfil dos clientes da Shoptech.'
)
st.text(
    'Ele consolida dados da tabela de pedidos e da tabela de clientes para gerar informa√ß√µes agregadas.'
)

st.markdown("""
A consulta SQL pode ser dividida em duas etapas principais:

1. **Agrega√ß√£o dos dados de pedidos e clientes**:
   - A consulta come√ßa criando a CTE (`total_orders_per_customer`), onde unimos a tabela de pedidos (`stg_shoptech__orders`) com a tabela de clientes (`stg_shoptech__customers`).
   - Nesta etapa, calculamos:
     - O n√∫mero total de pedidos por perfil de cliente (`total_orders`).
     - A idade m√©dia do cliente (`avg_age`), extraindo o ano de nascimento da data de nascimento (`date_of_birth`).
     - O valor m√©dio do pedido (`avg_order_value`), utilizando a m√©dia dos valores dos pedidos.

2. **Classifica√ß√£o dos perfis de clientes**:
   - Ap√≥s a agrega√ß√£o dos dados, utilizamos a fun√ß√£o `RANK()` para criar duas classifica√ß√µes:
     - `rank_total_orders`: Classifica√ß√£o do perfil com base no total de pedidos (do maior para o menor).
     - `rank_avg_order_value`: Classifica√ß√£o do perfil com base no ticket m√©dio (do menor para o maior).

O resultado final exibe os perfis ordenados pelo total de pedidos, permitindo identificar os clientes mais relevantes para a Shoptech.
""")
